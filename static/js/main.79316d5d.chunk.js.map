{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","store/actions.js","store/constants.js","serviceWorker.js","store/searchField.reducer.js","store/robots.reducer.js","store/root-reducer.js","store/store.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","robots","map","users","i","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","React","Component","App","onRequestRobots","isPending","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","isRobotsReqPending","robotsReqError","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialState","rootReducer","combineReducers","action","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.79316d5d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const {id,name,email} = props; //destructuring\n    //you have to wrap every javascript syntax with curly brackets\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n            <div>{name}</div>\n            <p>{email}</p>\n        </div>\n    );\n};\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => { //calling props from app\n    return (<div>\n        {  robots.map((users,i)=>{\n            return (<Card\n            key={robots[i].id}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n            />); //to avoid errors if one of the items in the array , we need to add key props whenever we loop an array\n            })\n        }\n    </div>);\n};          // find out more about it by deleting key props and reading the error in the console // key props should be a number that doesn't change like id\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField,searchChange}) => {//calling the searchChange property //search is ,in turn,also a function(this.onSearchChange),\n    return (                                       //so whenever onChange occurs in the input, searchChange function got called\n        <div className=\"pa2\">\n            <input\n                aria-label=\"search robots\"\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n\n};\nexport default SearchBox;","import React from 'react';\nconst Scroll = (props) => { //scroll is wrapped around other elements//it's different\n    //console.log(props); //you get object. If we look inside the object, you'll see cardList\n    return (//adding css scrollable attribute // can do it inside css file\n        <div style={{overflowY:'auto', border: '1px solid black',height:'500px'}}>\n            {props.children}\n        </div>\n    );//rendering its children:Cardlist\n    //return <h1>Hi</h1>; //eg <<\n};\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from \"../components/CardList\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport './App.css';\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport {requestRobots, setSearchField} from \"../store/actions\";\n\n//containers are somethings that has state in them// not pure functions\nclass App extends Component {//need to use class in order to be able to use constructor and state\n    // constructor(){ // part of react don't need to use arrow functions\n    //     super();\n    //     this.state = {//state is something that's not static // something that's changing //unlike props\n    //         robots : [],\n    //     };\n    //     //console.log('constructor')\n    // }\n    componentDidMount() { // part of react don't need to use arrow functions //constructor(), render(), and componentDidMount() are part of what's called react life hooks //google!//\n        // fetch('https://jsonplaceholder.typicode.com/users')\n        //     .then(response => response.json())\n        //     .then(users => this.setState({robots:users})); //part of next sections //instead of using robots file// we use web API's users array\n        // //console.log('componentDidMount')\n\n      this.props.onRequestRobots()\n    }\n\n    // onSearchChange = event => { //need to use arrow function to make sure that 'this' means App, not input field // if we don't use arrow function ,this will mean input filed because onSearchChange function is running on the input field// so we need to make sure we use arrow function;Otherwise, we'll get an error\n    //     // console.log(event.target.value); //logging input value\n    //     this.setState({searchField: event.target.value}); // if we want to change state we do this. //notice? it's an object\n    // };\n    render() {\n     // const {robots}=this.state;//destructuring\n      const {searchField, robots, isPending, onSearchChange} = this.props\n      const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase()); //toLowerCase is used so that if input is in uppercase it doesn't make any different\n        });\n      return isPending ? //in case the API server's slow //adding Loading header //using instead of robots.length===0\n           (<h1>Loading</h1>): //using ternary operator instead of if else\n           (\n              <div className=\"tc\">\n                  <h1 className=\"f1\">RoboFriends</h1>\n                  <SearchBox searchChange={onSearchChange}/>\n                  <Scroll>\n                    <ErrorBoundary>\n                      <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                  </Scroll>\n              </div>\n          );\n    };\n}\n\nconst mapStateToProps = state => ({\n  searchField: state.searchField.searchField,\n  robots: state.robots.robots,\n  isRobotsReqPending: state.robots.isPending,\n  robotsReqError: state.robots.error\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()), //thunks intercepts if dispatched action is returning a function other than an object\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => { //thunks intercepts if dispatched action is returning a function other than an object\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD} from \"./constants\";\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchFieldReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return state = {...state, searchField: action.payload} //state is readonly , so, we can't change its properties directly\n    default:\n      return state\n  }\n}","import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nconst initialState = {\n  robots: [],\n  isPending: false,\n  error: null\n}\n\nexport const robotsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return state = {...state, isPending: true}\n    case REQUEST_ROBOTS_SUCCESS:\n      return state = {...state, isPending: false, robots: action.payload }\n    case REQUEST_ROBOTS_FAILED:\n      return state = { ...state, error: action.payload, isPending: false }\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport {searchFieldReducer} from \"./searchField.reducer\";\nimport {robotsReducer} from \"./robots.reducer\";\n\nexport const rootReducer = combineReducers({\n  searchField: searchFieldReducer,\n  robots: robotsReducer,\n})","import {createStore, applyMiddleware} from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport logger from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {rootReducer} from \"./root-reducer\";\n\nconst middleware = [thunkMiddleware]\n\nif(process.env.NODE_ENV === 'development') {\n  middleware.push(logger);\n}\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; //extra library ,like bootstrap// need to install by staying npm install tachyons\nimport { Provider } from 'react-redux';\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}